@model Wattmate_Site.Controllers.ViewModels.TelemetryViewModel

@Html.Hidden("DeviceId", Model.DeviceId)

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="~/js/telemetry-charts.js" asp-append-version="true"></script>

<!-- TOP ROW -->
<div style="width: 100vw; display: flex; height: 50vh;">
    <!-- Pre-Control graph -->
    <div style="width: 45%; height: 100%; border: 1px solid rgb(200, 200, 200); border-right: 0; text-align: center;">
        <h2 id="label_cost"> </h2>
        <div style="height: 300px; margin-top: 10px; margin-left: 10px;">
            <canvas style="margin-left: 100px;" id="preStyringChart"></canvas>
            <h3 id="date-h3">Start date: 2025-05-09 14:05</h3>
            <div style="display: flex; width: 100%; justify-content: center;">
                <button onclick="moveDates(true);" class="btn btn-sm btn-primary me-2">Tilbage</button>
                <button onclick="moveDates(false);" class="btn btn-sm btn-primary me-2">Frem</button>
            </div>
            
        </div>
    </div>
    <div style="width: 50%; height: 100%; border: 1px solid rgb(200, 200, 200); text-align: center;">
        <h3>Dage omkostninger</h3>
        <div style="height: 300px; margin-top: 10px; margin-left: 10px;">
            <canvas id="omkostChart"></canvas>
        </div>
    </div>
</div>
<!-- BOTTOM ROW -->
<div style="width: 100vw; display: flex; height: 50vh">
    <div style="width: 50%; height: 100%">
    </div>
    <div style="width: 50%;height: 100%">
    </div>
</div>

<script>

    Date.prototype.addHours = function (h) {
        this.setTime(this.getTime() + (h * 60 * 60 * 1000));
        return new Date(this);
    }

    function backToMain(){
        window.location.href = "/";
    }

    // DAYS COSTS
    const char_cost = document.getElementById("omkostChart")
    let cost_endDate = new Date();
    let cost_daysBack = 11;
    let costChartElement = undefined;

    // TEMP/KWH GRAPH

    const range_hours = 6;

    const char_without = document.getElementById("preStyringChart")
    const label_date = document.getElementById("date-h3");
    const label_cost = document.getElementById("label_cost");

    let without_endDate = new Date()
    let chartElement = undefined;

    getFridgeTelemetry(without_endDate, range_hours, chartElement);
    showDaysCostsData(cost_endDate, cost_daysBack, costChartElement);

    function moveDates(back) {
        if (back == true) {
            without_endDate.addHours(-range_hours);
        } else{
            without_endDate.addHours(range_hours);
        }

        getFridgeTelemetry(without_endDate, range_hours, chartElement);
    }

    async function showDaysCostsData(endDate, daysBack, chart) {
        let data = [];

        for(let i = 0; i < daysBack; i++ ){
            let daysData = await getDaysCostData(endDate);
            data.push({ day: new Date(daysData.day), cost: daysData.cost });
            endDate.addHours(-24);
        }

     



        let labels = [];
        let iData = [];

        data.forEach(dayElement => {
            labels.push(formatLabelDate(dayElement.day));
            iData.push(dayElement.cost);
        });

        console.log(labels);
        console.log(iData);

        // const totalCostLabel = document.getElementById('totalCost');
        // totalCostLabel.innerHTML = apiData.totalCost;

        const chartData = {
            labels: labels,
            datasets: [{
                label: 'DKK',
                data: iData,
                fill: true,
                borderColor: 'rgba(75, 192, 192, 0.8)',
                tension: 0.1
            }
            ]
        };

        if (costChartElement == undefined) {
            costChartElement = initiateBarChart(char_cost, chartData);
        } else {
            costChartElement.data.labels = labels;
            costChartElement.data.datasets[0].data = iData;
            costChartElement.update();
        }



        // END
    }

    async function getDaysCostData(date) {
        let startDate = new Date(date);
        let endDate = new Date(date);

        startDate.setHours(0, 1, 0, 0);
        endDate.setHours(23, 59, 0, 0);

        let hidden = document.getElementById("DeviceId");
        let _deviceId = "NONE";
        if (hidden) {
            _deviceId = hidden.value;
        }
        var body = {
            DeviceId: _deviceId,
            StartDate: startDate,
            EndDate: endDate,
            GroupingInterval: 10
        }

        // Get 10 minutes intervals
        const response = await fetch('/Telemetry/GetFridgeTelemetry', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        if (response.status == 200) {

        }
        else {

        }

        const apiData = await response.json();

        return { day: date, cost: apiData.totalCost }
    }

    function chartCallback(label, value){
        console.log(label);
        console.log(value);
    }

    async function getFridgeTelemetry(endDate, range, chart) {
        
        let startDate = new Date(endDate.getTime() - range * 60 * 60 * 1000);
        let hidden = document.getElementById("DeviceId");
        let _deviceId = "NONE";
        if(hidden){
            _deviceId = hidden.value;
        }
        var body = { DeviceId: _deviceId, 
                     StartDate: startDate, 
                     EndDate: endDate, 
                     GroupingInterval: 10 }

        // Get 10 minutes intervals
        const response = await fetch('/Telemetry/GetFridgeTelemetry', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        if (response.status == 200) {

        }
        else {

        }

        const apiData = await response.json();


        let labels = [];
        let iData = [];
        let kwh = [];
        let cost = [];
        let prices = [];

        apiData.temperatureData.forEach(interval => {
            let start = new Date(interval.intervalStart);
            labels.push(formatTimeElement(start.getHours()) + ":" + formatTimeElement(start.getMinutes()));
            iData.push(interval.avarageIntervalTemperature);
            kwh.push(interval.kwhDelta);
            cost.push(interval.costInDkk);
        });


        // const totalCostLabel = document.getElementById('totalCost');
        // totalCostLabel.innerHTML = apiData.totalCost;
        
        const chartData = {
            labels: labels,
            datasets: [{
                label: 'Temperature',
                data: iData,
                fill: true,
                borderColor: 'rgba(75, 192, 192, 0.8)',
                tension: 0.1
            }, {
                label: 'Kwh usage',
                data: kwh,
                fill: true,
                borderColor: 'rgba(0, 192, 0, 0.8)',
                tension: 0.1
            }
            ]
        };

        if (chart == undefined) {
            chartElement = initiateLineChart(char_without, chartData, chartCallback);
        } else {
            chart.data.labels = labels;
            chart.data.datasets[0].data = iData;
            chart.data.datasets[1].data = kwh;
            chart.update();
        }

       
        label_date.innerHTML = "Start Date: " + formatDate(startDate);
        label_cost.innerHTML = "Period omkostninger: " + apiData.totalCost;

    }

        function formatTimeElement(ele){
            if (ele > 9) {
                return ele;
            } else {
                return "0" + ele;
            }
        }

        function formatLabelDate(date) {
           
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        function formatIntervalLabel(startDate, endDate){
            let s_hours = startDate.getHours() > 9 ? startDate.getHours() : "0" + startDate.getHours();
            let s_mins = startDate.getMinutes() > 9 ? startDate.getMinutes() : "0" + startDate.getMinutes();
            let e_hours = endDate.getHours() > 9 ? endDate.getHours() : "0" + endDate.getHours();
            let e_mins = endDate.getMinutes() > 9 ? endDate.getMinutes() : "0" + endDate.getMinutes();
          

            return s_hours + ":" + s_mins + " - " + e_hours + ":" + e_mins; 
        }

        function formatDate(date) {
            const pad = (num) => String(num).padStart(2, '0');

            const year = date.getFullYear();
            const month = pad(date.getMonth() + 1); // Months are 0-indexed
            const day = pad(date.getDate());
            const hours = pad(date.getHours());
            const minutes = pad(date.getMinutes());

            return `${year}-${month}-${day} ${hours}:${minutes}`;
        }
        
    
    
</script>